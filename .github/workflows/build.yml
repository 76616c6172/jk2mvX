name: Build

on:
  workflow_dispatch:
  push:
    branches: actions
  pull_request:
    branches: actions
  release:
    types: [created]

jobs:
  vs2019-installer:
    name: Build VS 2019 (Installer), ${{ matrix.build_type }}, ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      matrix:
        build_type: [RelWithDebInfo]
        arch: [Win32]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build/actions

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build/actions
      run: cmake $GITHUB_WORKSPACE -A ${{ matrix.arch }} -DBuildPortableVersion=OFF

    - name: Build
      working-directory: ${{github.workspace}}/build/actions
      shell: cmd
      run: msbuild /m /p:Configuration=${{ matrix.build_type }} PACKAGE.vcxproj

    - uses: 'actions/upload-artifact@v2'
      with:
        name: Windows Installer, ${{ matrix.build_type }}, ${{ matrix.arch }}
        path: ${{github.workspace}}/build/actions/out/*.exe

    # As actions/upload-release-asset seems to demand exact filenames and content types we use a script instead
    - name: Upload Release
      if: ${{ github.event_name == 'release' && matrix.build_type == 'RelWithDebInfo' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          for ( let filename of await fs.readdir(String.raw`${{github.workspace}}/build/actions/out/`) )
          {
            if ( filename.endsWith('.exe') )
            {
              await github.repos.uploadReleaseAsset(
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ github.event.release.id }},
                  name: filename,
                  data: await fs.readFile( String.raw`${{github.workspace}}/build/actions/out/` + filename )
                }
              );
            }
          }

  vs2019:
    name: Build VS 2019 (Portable), ${{ matrix.build_type }}, ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo]
        arch: [Win32, x64]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build/actions

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build/actions
      run: cmake $GITHUB_WORKSPACE -A ${{ matrix.arch }} -DBuildPortableVersion=ON

    - name: Build
      working-directory: ${{github.workspace}}/build/actions
      shell: cmd
      run: msbuild /m /p:Configuration=${{ matrix.build_type }} PACKAGE.vcxproj

    #- uses: 'actions/upload-artifact@v2'
    #  with:
    #    name: Windows Binaries, ${{ matrix.build_type }}, ${{ matrix.arch }}
    #    path: ${{github.workspace}}/build/actions/out/${{ matrix.build_type }}/*

    - uses: 'actions/upload-artifact@v2'
      if: ${{ matrix.build_type == 'RelWithDebInfo' }}
      with:
        name: Windows Package, ${{ matrix.build_type }}, ${{ matrix.arch }}
        path: ${{github.workspace}}/build/actions/out/*.zip

    # As actions/upload-release-asset seems to demand exact filenames and content types we use a script instead
    - name: Upload Release
      if: ${{ github.event_name == 'release' && matrix.build_type == 'RelWithDebInfo' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          for ( let filename of await fs.readdir(String.raw`${{github.workspace}}/build/actions/out/`) )
          {
            if ( filename.endsWith('.zip') )
            {
              await github.repos.uploadReleaseAsset(
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ github.event.release.id }},
                  name: filename,
                  data: await fs.readFile( String.raw`${{github.workspace}}/build/actions/out/` + filename )
                }
              );
            }
          }

  vs2017_xp:
    name: Build VS 2017 (Portable - Windows XP), ${{ matrix.build_type }}
    runs-on: windows-2016
    strategy:
      matrix:
        build_type: [Debug, RelWithDebInfo]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build/actions

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build/actions
      run: cmake $GITHUB_WORKSPACE -A Win32 -T v141_xp -DBuildPortableVersion=ON

    - name: Build
      working-directory: ${{github.workspace}}/build/actions
      shell: cmd
      run: msbuild /m /p:Configuration=${{ matrix.build_type }} PACKAGE.vcxproj

    #- uses: 'actions/upload-artifact@v2'
    #  with:
    #    name: Windows Binaries (Windows XP), ${{ matrix.build_type }}
    #    path: ${{github.workspace}}/build/actions/out/${{ matrix.build_type }}/*

    - uses: 'actions/upload-artifact@v2'
      if: ${{ matrix.build_type == 'RelWithDebInfo' }}
      with:
        name: Windows Package (Windows XP), ${{ matrix.build_type }}
        path: ${{github.workspace}}/build/actions/out/*.zip

    # As actions/upload-release-asset seems to demand exact filenames and content types we use a script instead
    - name: Upload Release
      if: ${{ github.event_name == 'release' && matrix.build_type == 'RelWithDebInfo' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          for ( let filename of await fs.readdir(String.raw`${{github.workspace}}/build/actions/out/`) )
          {
            if ( filename.endsWith('.zip') )
            {
              await github.repos.uploadReleaseAsset(
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ github.event.release.id }},
                  name: filename.split('.').slice(0, -1).join('.') + "-winxp.zip",
                  data: await fs.readFile( String.raw`${{github.workspace}}/build/actions/out/` + filename )
                }
              );
            }
          }

  macos:
    name: Build macOS AppleClang, ${{ matrix.build_type }}, ${{ matrix.portable }}
    runs-on: macos-10.15
    env:
        DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
    strategy:
      matrix:
        build_type: [Debug, Release]
        portable: [Portable, Non-Portable]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: Set CMake parameters
      id: cmakeargs
      shell: bash
      run: |
        if [ "${{ matrix.portable }}" == "Portable" ]; then
          echo '::set-output name=PORTABLE::-DBuildPortableVersion=ON'
        else
          echo '::set-output name=PORTABLE::-DBuildPortableVersion=OFF'
        fi

    - name: Create Build Environment
      run: |
        brew install sdl2
        mkdir -p ${{github.workspace}}/build/actions

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build/actions
      run: cmake -G "Unix Makefiles" -DUseInternalLibs=ON ${{ steps.cmakeargs.outputs.PORTABLE }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} $GITHUB_WORKSPACE

    - name: Build
      working-directory: ${{github.workspace}}/build/actions
      shell: bash
      run: make

    - name: Package
      working-directory: ${{github.workspace}}/build/actions
      shell: bash
      run: make package

    #- uses: 'actions/upload-artifact@v2'
    #  with:
    #    name: macOS Binaries, ${{ matrix.build_type }}, ${{ matrix.portable }}
    #    path: ${{github.workspace}}/build/actions/out/${{ matrix.build_type }}/*

    - uses: 'actions/upload-artifact@v2'
      if: ${{ matrix.build_type == 'Release' }}
      with:
        name: macOS Package, ${{ matrix.build_type }}, ${{ matrix.portable }}
        path: |
          ${{github.workspace}}/build/actions/out/*.tar.gz
          ${{github.workspace}}/build/actions/out/*.dmg

    # As actions/upload-release-asset seems to demand exact filenames and content types we use a script instead
    - name: Upload Release
      if: ${{ github.event_name == 'release' && matrix.build_type == 'Release' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          for ( let filename of await fs.readdir('${{github.workspace}}/build/actions/out/') )
          {
            if ( filename.endsWith('.tar.gz') || filename.endsWith('.dmg') )
            {
              await github.repos.uploadReleaseAsset(
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ github.event.release.id }},
                  name: filename,
                  data: await fs.readFile( "${{github.workspace}}/build/actions/out/" + filename )
                }
              );
            }
          }

  linux:
    name: Build Linux, ${{ matrix.build_type }}, ${{ matrix.portable }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [Debug, Release]
        portable: [Portable, Non-Portable]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: Set CMake parameters
      id: cmakeargs
      shell: bash
      run: |
        if [ "${{ matrix.portable }}" == "Portable" ]; then
          echo '::set-output name=PORTABLE::-DUseInternalLibs=ON -DBuildPortableVersion=ON'
        else
          echo '::set-output name=PORTABLE::-DUseInternalLibs=OFF -DBuildPortableVersion=OFF'
        fi

    - name: Create Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install git zip wget libfuse2 build-essential libsdl2-dev libgl1-mesa-dev libopenal-dev libjpeg-dev libpng-dev libminizip-dev
        mkdir -p ${{github.workspace}}/build/actions

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build/actions
      run: cmake ${{ steps.cmakeargs.outputs.PORTABLE }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} $GITHUB_WORKSPACE

    - name: Build
      working-directory: ${{github.workspace}}/build/actions
      shell: bash
      run: make

    - name: Package
      working-directory: ${{github.workspace}}/build/actions
      shell: bash
      run: make package

    #- uses: 'actions/upload-artifact@v2'
    #  with:
    #    name: Linux Binaries, ${{ matrix.build_type }}, ${{ matrix.portable }}
    #    path: ${{github.workspace}}/build/actions/out/${{ matrix.build_type }}/*

    - uses: 'actions/upload-artifact@v2'
      if: ${{ matrix.build_type == 'Release' }}
      with:
        name: Linux Package, ${{ matrix.build_type }}, ${{ matrix.portable }}
        path: |
          ${{github.workspace}}/build/actions/out/*.tar.gz
          ${{github.workspace}}/build/actions/out/*.deb
          ${{github.workspace}}/build/actions/out/*.rpm

    # As actions/upload-release-asset seems to demand exact filenames and content types we use a script instead
    - name: Upload Release
      if: ${{ github.event_name == 'release' && matrix.build_type == 'Release' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          for ( let filename of await fs.readdir('${{github.workspace}}/build/actions/out/') )
          {
            if ( filename.endsWith('.tar.gz') || filename.endsWith('.deb') || filename.endsWith('.rpm') )
            {
              await github.repos.uploadReleaseAsset(
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ github.event.release.id }},
                  name: filename,
                  data: await fs.readFile( "${{github.workspace}}/build/actions/out/" + filename )
                }
              );
            }
          }
